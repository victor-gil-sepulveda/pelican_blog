<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The lost library of Agraphur</title><link>https://victor-gil-sepulveda.github.io/</link><description>Pieces from a whole</description><lastBuildDate>Tue, 25 Oct 2016 21:33:00 +0200</lastBuildDate><item><title>Blogging with Pelican: Experimental Setup</title><link>https://victor-gil-sepulveda.github.io/blogging-with-pelican:-experimental-setup.html</link><description>&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Before getting serious into blogging with Pelican, there are two main concerns that must be solved: how to isolate it and all its dependencies from your current Python installation, and how to effectively manage version control.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;For the first issue, the usual recommendation is to install Pelican in a new Python environment (e.g. using &lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt;)with and to always work using it. I totally hate environment-based setups. Do not ask me why, I have not found any reason but laziness.&lt;/p&gt;
&lt;p&gt;Solving the second one can be a bit tricky. In every Pelican project you can distinguish up to 3 main &amp;quot;areas&amp;quot; of your workspace. The first one is the root folder itself, which contains the configuration and the theme you want to use. The second is the &amp;quot;contents&amp;quot; folder, which holds the source files that will generate your blog's posts and pages. And the third one is the &amp;quot;output&amp;quot; folder, which holds the actual HTML of the posts and pages, plus all the other goodies that must be uploaded in order to have a working web page. So, at the end of the day one can distinguish between two main group of files, the source ones and the generated ones. The problem here is that, in order to publish your blog using Github pages, you must commit only the contents of your &amp;quot;output&amp;quot; folder to the repository, but not the source ones (which you may want to commit somewhere else in order to track your changes!).&lt;/p&gt;
&lt;p&gt;The customary solution for this consists in creating two different repositories, one for the source files and the other for publishing (&amp;quot;output&amp;quot; folder). The &amp;quot;output&amp;quot; repository is eventually included into the other as a submodule.&lt;/p&gt;
&lt;div class="section" id="my-setup"&gt;
&lt;h2&gt;My setup&lt;/h2&gt;
&lt;p&gt;As I have mentioned, I preferred to implement an experimental approach to the setup that allowed me to learn new things. First, I wanted to completely separate the source files of the project from the generated files, as well as to detach the editing process from the generation process. My solution has been to use a Virtual Machine (handled with &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;) where the generation will take place.&lt;/p&gt;
&lt;p&gt;In brief, the root folder of the project (shared folder from the VM perspective) holds all source and configuration files and is associated to a branch called &amp;quot;source&amp;quot; of my Github pages repo. The first time I tell Vagrant to start the VM, it will install Pelican and all its needed packages. All the other times, it just regenerates the Pelican project structure into /home/vagrant/blog and creates symbolic links that point to the needed source files in the shared folder. This allows me to maintain the source file tree separated from the output and to set the folder structure I find more convenient (see the &lt;a class="reference external" href="https://github.com/victor-gil-sepulveda/victor-gil-sepulveda.github.io/tree/source"&gt;source&lt;/a&gt; branch to see what I am talking about). Also, it allows me to start Pelican's included HTTP server from the VM and mimic the access to a real remote web server. The output folder remains untracked though, it will get published in a different way (stay tuned!).&lt;/p&gt;
&lt;p&gt;To summarize, this setup allows me to overcome some of the problems I have found using Octopress. First and foremost, it is all Python and I understand what is happening in the background. Also, the incredibly complex file tree generated by Octopress gets seamlessly simplified and the folder structure makes sense to me. Maybe not to the rest of the world, but in this case I will be the only one working here, isn't it?. Finally, having the source files are totally separated from the generation process allows a safer workflow. I think that now it is highly improbable that my files get lost due to Pelican updates, as it happened with Octopress.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">VÃ­ctor A. Gil</dc:creator><pubDate>Tue, 25 Oct 2016 21:33:00 +0200</pubDate><guid isPermaLink="false">tag:victor-gil-sepulveda.github.io,2016-10-25:blogging-with-pelican:-experimental-setup.html</guid><category>Pelican</category><category>Github Pages</category><category>Vagrant</category></item><item><title>Blogging with Pelican: First Impressions</title><link>https://victor-gil-sepulveda.github.io/theres_a_new_bloger.html</link><description>&lt;div class="section" id="there-s-a-new-blogger-in-town"&gt;
&lt;h2&gt;There's a new blogger in town!&lt;/h2&gt;
&lt;p&gt;It was the year 2014. I was young and inexperienced &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;, and I wanted to start a web log. At that time I was coursing a PhD, which is a well known way of being poor for the rest of your life &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;, reason why I looked for a free hosting solution where my (obviously static) blog would reside. The winner from my not-so-impressive list was Github pages.&lt;/p&gt;
&lt;p&gt;Github pages can process &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; blogs out of the box, which looked like a very fancy feature, but Jekyll did not look so fancy to me. It was written in Ruby and I did not had patience to learn that language. But there was still another option: &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;. They were claiming that it was a very automatized Jekyll blog generation tool. I believed it. And this was my first and last mistake as blogger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-experience-with-octopress"&gt;
&lt;h2&gt;My experience with Octopress&lt;/h2&gt;
&lt;p&gt;As you may have already guessed from the previous paragraph, my experience with Octopress was not that good. First and foremost, all the magic it was performing made me feel uncomfortable. But maube the most important thing is that it was cluttering my blog workspace with tones of folders and configuration files. And as I did not read the code, I did not have any clue of how the generation process worked.&lt;/p&gt;
&lt;p&gt;In more than two years I only published a post. And its source file just disappeared one of those times I had to reinstall Octopress. I also wrote a lot of other proto-posts in &lt;em&gt;txt&lt;/em&gt; files. All were lost the last time I had to change the &lt;em&gt;OS&lt;/em&gt;. So, in conclusion, Octopress was not fostering my productivity at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="long-live-pelican"&gt;
&lt;h2&gt;Long live Pelican!&lt;/h2&gt;
&lt;p&gt;Recently, and thanks to several conversations with professional recruiters, I have discovered that my CV is too difficult to understand. It is understandable: since they receive tones of CVs per day and only have some minutes to spend with every one, a too complex CV is the first step to failure. Besides, my CV has two added handicaps: first,  it is an &amp;quot;academic CV&amp;quot;, which means it is long and full of details that are of no interest to regular companies. Second, I have worked as a &lt;a class="reference external" href="http://www.rse.ac.uk/who.html"&gt;Research Software Engineer&lt;/a&gt; these last 9 years, which is a rare and difficult to explain role. This meant I had to devise a better way to present myself to prospective employers. What about trying with a blog again? Why not?&lt;/p&gt;
&lt;p&gt;Again, I focused on static blog generators, but this time I decided I wanted it to be in a language I already mastered: Python. There are many choices (ej. &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, &lt;a class="reference external" href="http://hyde.github.io/"&gt;Hyde&lt;/a&gt;), and I just picked the one that looked to have the smaller codebase: &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Starting a blog with Pelican is incredibly easy. Just use the &amp;quot;quickstart&amp;quot; script and download a theme. You will have a complete blog in a matter of minutes. And, also very important, you will not end with cluttered workspace: in its simplest form, Pelican just needs a contents folder and a couple of configuration scripts. Which are written in Python too. Delightful.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;There are only two drawbacks of Pelican as far as I have seen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The documentation is too brief and does not cover all the features in detail. It can become very difficult to obtain information about how to extend Pelican with plugins or about how to use some configuration options (which can give you the impression that some of them are buggy). You will end learning by example, thanks to the several other Pelican users that have documented their efforts.&lt;/li&gt;
&lt;li&gt;It does not have a managing system for simple and repetitive tasks like creating posts, which other static generators like Octopress have.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I suppose the first issue will improve over time, and about the second one ... well, you can do it yourself. At the end of the day that is&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Now I am older and yet inexperienced.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You gain extra poverty points if you do it in Spain!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">VÃ­ctor A. Gil</dc:creator><pubDate>Mon, 17 Oct 2016 19:30:00 +0200</pubDate><guid isPermaLink="false">tag:victor-gil-sepulveda.github.io,2016-10-17:theres_a_new_bloger.html</guid><category>Pelican</category></item></channel></rss>